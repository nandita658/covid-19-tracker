{"version":3,"sources":["InfoBox.js","Table.js","util.js","Map.js","LineGraph.js","App.js","reportWebVitals.js","index.js"],"names":["InfoBox","props","Card","className","active","isRed","isGrey","onClick","CardContent","Typography","color","title","cases","total","Table","countries","map","country","numeral","format","casesTypeColors","hex","mulitiplier","recovered","deaths","sortData","data","sortedData","sort","a","b","prettyPrintStat","stat","showDataOnMap","casesType","Circle","center","countryInfo","lat","long","fillOpacity","pathOptions","fillColor","radius","Math","sqrt","Popup","style","backgroundImage","flag","Map","zoom","ChangeView","useMap","setView","MapContainer","scrollWheelZoom","TileLayer","attribution","url","options","legend","display","elements","point","maintainAspectRatio","tooltips","mode","intersect","callbacks","label","tooltipItem","value","scales","xAxes","type","time","tooltipFormat","yAxes","gridLines","ticks","callback","index","values","buildChartData","lastDataPoint","chartData","date","newDataPoint","x","y","push","LineGraph","useState","setData","useEffect","fetch","then","response","json","console","log","fetchData","length","datasets","backgroundColor","borderColor","App","setCountries","setCountry","setCountryInfo","tableData","setTableData","mapCenter","setMapCenter","setZoom","mapCountries","setMapCountries","setCasesType","name","iso2","getCountriesData","onCountryChange","event","countryCode","target","FormControl","Select","variant","onChange","MenuItem","e","todayCases","todayRecovered","todayDeaths","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.7a061af7.chunk.js","sourcesContent":["import React from 'react';\r\nimport { Card, CardContent, Typography } from '@material-ui/core';\r\n\r\nimport './InfoBox.css';\r\n\r\nfunction InfoBox(props) {\r\n    return (\r\n        <Card className={`infoBox ${props.active&&'infoBox--selected'} ${props.isRed&&'infoBox--red'} ${props.isGrey&&'infoBox--grey'}`} onClick={props.onClick}> \r\n            <CardContent>\r\n                {/* Title */}\r\n                <Typography className=\"infoBox__title\" color=\"textSecondary\">{props.title}</Typography>\r\n                {/* Number of Cases */}\r\n                <h2 className={`infoBox__cases ${!props.isRed&&\"infoBox__cases--green\"} ${props.isGrey&&\"infoBox__cases--grey\"}`}>{props.cases}</h2>\r\n                {/* Total */}\r\n                <Typography className=\"infoBox__total\" color=\"textSecondary\">Total {props.title}:- {props.total}</Typography>\r\n            </CardContent>\r\n        </Card>\r\n    )\r\n}\r\n\r\nexport default InfoBox;\r\n","import React from 'react';\r\nimport numeral from \"numeral\";\r\nimport './Table.css';\r\n\r\nfunction Table(props) {\r\n    return (\r\n        <div className=\"table\">\r\n            {props.countries.map(({country, cases})=>(\r\n                <tr>\r\n                    <td>{country}</td>\r\n                    <td>\r\n                        <strong>{numeral(cases).format(\"000,000\")}</strong>\r\n                    </td>\r\n                </tr>\r\n            ))}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Table;\r\n","import React from \"react\";\r\nimport numeral from \"numeral\";\r\nimport { Circle, Popup } from \"react-leaflet\";\r\n\r\nconst casesTypeColors = {\r\n  cases: {\r\n    hex: \"#CC1034\",\r\n    // rgb: \"rgb(204,16,52)\",\r\n    // half_op: \"rgba(204,16,52,0.5)\",\r\n    mulitiplier: 800,\r\n  },\r\n\r\n  recovered: {\r\n    hex: \"#7DD71D\",\r\n    // rgb: \"rgb(125,215,29)\",\r\n    // half_op: \"rgba(125,215,29,0.5)\",\r\n    mulitiplier: 1200,\r\n  },\r\n\r\n  deaths: {\r\n    hex: \"#C0C0C0\",\r\n    // rgb: \"rgb(251,68,67)\",\r\n    // half_op: \"rgba(251,68,67,0.5)\",\r\n    mulitiplier: 2000,\r\n  },\r\n};\r\n\r\nexport const sortData = (data) => {\r\n  const sortedData = [...data];\r\n\r\n  sortedData.sort((a, b) => b.cases - a.cases);\r\n\r\n  return sortedData;\r\n};\r\n\r\nexport const prettyPrintStat = (stat) =>\r\n  stat ? `+${numeral(stat).format(\"0.0a\")}` : \"+0\";\r\n\r\n//Draw circles on the map\r\nexport const showDataOnMap = (data, casesType) =>\r\n  data.map((country) => (\r\n    <Circle\r\n      center={[country.countryInfo.lat, country.countryInfo.long]}\r\n      fillOpacity={0.4}\r\n      pathOptions={{\r\n        color: casesTypeColors[casesType].hex,\r\n        fillColor: casesTypeColors[casesType].hex,\r\n      }}\r\n      radius={\r\n        Math.sqrt(country[casesType] / 10) *\r\n        casesTypeColors[casesType].mulitiplier\r\n      }\r\n    >\r\n      <Popup>\r\n        <div className=\"info-container\">\r\n          <div\r\n            className=\"info-flag\"\r\n            style={{ backgroundImage: `url(${country.countryInfo.flag})` }}\r\n          />\r\n          <div className=\"info-name\">{country.country}</div>\r\n          <div className=\"info-confirmed\">\r\n            Cases: {numeral(country.cases).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-recovered\">\r\n            Recovered: {numeral(country.recovered).format(\"0,0\")}\r\n          </div>\r\n          <div className=\"info-deaths\">\r\n            Deaths: {numeral(country.deaths).format(\"0,0\")}\r\n          </div>\r\n        </div>\r\n      </Popup>\r\n    </Circle>\r\n  ));","import React from \"react\";\r\nimport { MapContainer, TileLayer, useMap } from \"react-leaflet\";\r\nimport \"./Map.css\";\r\nimport { showDataOnMap } from \"./util\";\r\n\r\nfunction Map({ countries, casesType, center, zoom }) {\r\n  function ChangeView({ center, zoom }) {\r\n    const map = useMap();\r\n    map.setView(center, zoom);\r\n    return null;\r\n  }\r\n\r\n  return (\r\n    <MapContainer\r\n      casesType={casesType}\r\n      className=\"map\"\r\n      center={center}\r\n      zoom={zoom}\r\n      scrollWheelZoom={false}\r\n    >\r\n      <ChangeView center={center} zoom={zoom} />\r\n      <TileLayer\r\n        attribution='&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {showDataOnMap(countries, casesType)}\r\n    </MapContainer>\r\n  );\r\n}\r\n\r\nexport default Map;","import React, { useState, useEffect } from \"react\";\r\nimport { Line } from \"react-chartjs-2\";\r\nimport numeral from \"numeral\";\r\n\r\nconst options = {\r\n  legend: {\r\n    display: false,\r\n  },\r\n  elements: {\r\n    point: {\r\n      radius: 0,\r\n    },\r\n  },\r\n  maintainAspectRatio: false,\r\n  tooltips: {\r\n    mode: \"index\",\r\n    intersect: false,\r\n    callbacks: {\r\n      label: function (tooltipItem, data) {\r\n        return numeral(tooltipItem.value).format(\"+0,0\");\r\n      },\r\n    },\r\n  },\r\n  scales: {\r\n    xAxes: [\r\n      {\r\n        type: \"time\",\r\n        time: {\r\n          format: \"MM/DD/YY\",\r\n          tooltipFormat: \"ll\",\r\n        },\r\n      },\r\n    ],\r\n    yAxes: [\r\n      {\r\n        gridLines: {\r\n          display: false,\r\n        },\r\n        ticks: {\r\n          // Include a dollar sign in the ticks\r\n          callback: function (value, index, values) {\r\n            return numeral(value).format(\"0a\");\r\n          },\r\n        },\r\n      },\r\n    ],\r\n  },\r\n};\r\n\r\nconst buildChartData = (data, casesType) => {\r\n  let chartData = [];\r\n  let lastDataPoint;\r\n  for (let date in data.cases) {\r\n    if (lastDataPoint) {\r\n      let newDataPoint = {\r\n        x: date,\r\n        y: data[casesType][date] - lastDataPoint,\r\n      };\r\n      chartData.push(newDataPoint);\r\n    }\r\n    lastDataPoint = data[casesType][date];\r\n  }\r\n  return chartData;\r\n};\r\n\r\nfunction LineGraph({ casesType=\"cases\", ...props }) {\r\n  const [data, setData] = useState({});\r\n\r\n  useEffect(() => {\r\n    const fetchData = async () => {\r\n      await fetch(\"https://disease.sh/v3/covid-19/historical/all?lastdays=120\")\r\n        .then((response) => {\r\n          return response.json();\r\n        })\r\n        .then((data) => {\r\n          let chartData = buildChartData(data, casesType);\r\n          setData(chartData);\r\n          console.log(chartData);\r\n          // buildChart(chartData);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n  }, [casesType]);\r\n\r\n  return (\r\n    <div className={props.className}>\r\n      {data?.length > 0 && (\r\n        <Line\r\n          data={{\r\n            datasets: [\r\n              {\r\n                backgroundColor: \"rgba(204, 16, 52, 0.5)\",\r\n                borderColor: \"#CC1034\",\r\n                data: data,\r\n              },\r\n            ],\r\n          }}\r\n          options={options}\r\n        />\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default LineGraph;","import { React, useState, useEffect } from 'react';\nimport { MenuItem, FormControl, Select, Card, CardContent } from '@material-ui/core';\nimport InfoBox from './InfoBox';\nimport Table from './Table';\nimport Map from './Map';\n\nimport './App.css';\nimport { data } from 'browserslist';\nimport { prettyPrintStat, sortData } from './util';\nimport \"leaflet/dist/leaflet.css\";\nimport LineGraph from './LineGraph';\n\n\n\nfunction App() {\n  const [countries, setCountries] = useState([]);\n  const [country, setCountry] = useState('worldwide');\n  const [countryInfo, setCountryInfo] = useState({});\n  const [tableData, setTableData] = useState([]);\n  const [mapCenter, setMapCenter] = useState([34.80746, -40.4796]);\n  const [zoom, setZoom] = useState(3);\n  const [mapCountries, setMapCountries] = useState([])\n  const [casesType, setCasesType] = useState(\"cases\");\n  //https://disease.sh/v3/covid-19/countries\n\n  useEffect(() => {\n    fetch(\"https://disease.sh/v3/covid-19/all\").then(response => response.json()).then(data => {\n      setCountryInfo(data);\n    })\n  }, [])\n\n  useEffect(() => {\n    //async -> send a request, wait for it, need to do something with info\n    const getCountriesData = async () => {\n      await fetch(\"https://disease.sh/v3/covid-19/countries\").then((response) => response.json()).then((data) => {\n        const countries = data.map((country) => ({\n          name: country.country,\n          value: country.countryInfo.iso2,\n        }));\n        const sortedData = sortData(data);\n        setTableData(sortedData);\n        setMapCountries(data);\n        setCountries(countries);\n      });\n    };\n    getCountriesData();\n  }, [countries]);\n\n  const onCountryChange = async (event) => {\n    const countryCode = event.target.value;\n\n    setCountry(countryCode);\n\n    const url =\n      countryCode === \"worldwide\"\n        ? \"https://disease.sh/v3/covid-19/all\"\n        : `https://disease.sh/v3/covid-19/countries/${countryCode}`;\n\n    //https://disease.sh/v3/covid-19/all\n    //https://disease.sh/v3/covid-19/countries/[countryCode]\n\n    await fetch(url)\n      .then((response) => response.json())\n      .then((data) => {\n        setCountry(countryCode);\n        setCountryInfo(data);\n        // console.log([data.countryInfo.lat, data.countryInfo.long]);\n        countryCode === \"worldwide\"\n          ? setMapCenter([34.80746, -40.4796])\n          : setMapCenter([data.countryInfo.lat, data.countryInfo.long]);\n        setZoom(4);\n      });\n\n    console.log(countryInfo);\n  };\n\n\n  return (\n    <div className=\"app\">\n      <div className=\"app__left\">\n        {/* Header */}\n        <div className=\"app__header\">\n          <h1>COVID-19 TRACKER</h1>\n\n          {/* Title+Select input dropdown field */}\n          <FormControl className=\"app__dropdown\">\n            <Select variant=\"outlined\" onChange={onCountryChange} value={country}>\n              <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n              {countries.map((country) => (\n                <MenuItem value={country.value}>{country.name}</MenuItem>\n              ))}\n              {/* <MenuItem value=\"worldwide\">Worldwide</MenuItem>\n            <MenuItem value=\"worldwide\">Option2</MenuItem>\n            <MenuItem value=\"worldwide\">Option 3</MenuItem>\n            <MenuItem value=\"worldwide\">Option 4</MenuItem> */}\n            </Select>\n          </FormControl>\n        </div>\n\n        {/* InfoBox */}\n        <div className=\"app__stats\">\n          {/* Infobox title=\"Coronavirus cases\" */}\n          <InfoBox isRed active={casesType===\"cases\"} onClick={e=>setCasesType('cases')} title=\"Coronavirus Cases\" cases={prettyPrintStat(countryInfo.todayCases)} total={prettyPrintStat(countryInfo.cases)} />\n          {/* Infobox title=\"Coronavirus recoveries\" */}\n          <InfoBox active={casesType===\"recovered\"} onClick={e=>setCasesType('recovered')} title=\"Recovered\" cases={prettyPrintStat(countryInfo.todayRecovered)} total={prettyPrintStat(countryInfo.recovered)} />\n          {/* Infobox */}\n          <InfoBox isGrey active={casesType===\"deaths\"} onClick={e=>setCasesType('deaths')} title=\"Deaths\" cases={prettyPrintStat(countryInfo.todayDeaths)} total={prettyPrintStat(countryInfo.deaths)} />\n        </div>\n\n        {/* Map */}\n        <Map casesType={casesType} countries={mapCountries} center={mapCenter} zoom={zoom} />\n      </div>\n      <Card className=\"app__right\">\n        <CardContent>\n          <h3 className=\"app__table__title\">Live Cases by Country</h3>\n          {/* Table */}\n          <Table countries={tableData} />\n          <h3 className=\"app__graph__title\">Worldwide New Statistics of {casesType}</h3>\n          <LineGraph className=\"app__graph\" casesType={casesType} />\n        </CardContent>\n      </Card>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}